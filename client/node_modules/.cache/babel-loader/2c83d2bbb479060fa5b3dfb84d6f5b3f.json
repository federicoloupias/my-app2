{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorsActions';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCES, REGISTER_SUCCESS, REGISTER_FAIL, REGISTER_GOOGLE_SUCCESS, GET_FAVOURITES } from '../actions/types';\nimport firebase from '../initializers/firebase'; //Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password,\n  firstName,\n  lastName,\n  country\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    firstName,\n    lastName,\n    country\n  });\n  axios.post('http://localhost:8080/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // LogOut User\n\nexport const logout = () => {\n  firebase.auth().signOut().then(result => {\n    console.log(result);\n  }).catch(err => {\n    console.log(err);\n  });\n  return {\n    type: LOGOUT_SUCCES\n  };\n}; //LogIn User\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('http://localhost:8080/api/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const logInGoogle = user => dispatch => {\n  if (user) {\n    dispatch({\n      type: REGISTER_GOOGLE_SUCCESS\n    });\n  } else {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const getFavourites = id => dispatch => {\n  axios.get('http://localhost:8080/api/users/' + id).then(res => dispatch({\n    type: GET_FAVOURITES,\n    payload: res.data\n  }));\n}; // Setup config / headers and token\n\nexport const tokenConfig = getState => {\n  // Gete token from localStorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/me/Documents/GitHub/my-itinerary/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCES","REGISTER_SUCCESS","REGISTER_FAIL","REGISTER_GOOGLE_SUCCESS","GET_FAVOURITES","firebase","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","firstName","lastName","country","config","headers","body","JSON","stringify","post","logout","auth","signOut","result","console","log","login","logInGoogle","user","getFavourites","id","token"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    returnErrors\r\n} from './errorsActions'\r\nimport {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCES,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    REGISTER_GOOGLE_SUCCESS,\r\n    GET_FAVOURITES\r\n} from '../actions/types';\r\n\r\nimport firebase from '../initializers/firebase';\r\n\r\n//Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n\r\n    // User loading\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n\r\n    axios.get('/api/auth/user', tokenConfig(getState))\r\n        .then(res => dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        }))\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n\r\n}\r\n\r\n// Register User\r\nexport const register = ({ name, email, password, firstName, lastName, country }) => dispatch => {\r\n    //Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n    // Request body\r\n\r\n    const body = JSON.stringify({ name, email, password, firstName, lastName, country })\r\n\r\n    axios.post ('http://localhost:8080/api/users', body, config)\r\n    .then(res => dispatch ({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n    }))\r\n    .catch(err => {\r\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    });\r\n}\r\n\r\n\r\n// LogOut User\r\n\r\nexport const logout = () => {\r\n    firebase.auth().signOut()\r\n    .then(result => { \r\n        console.log(result)\r\n    }).catch(err =>{\r\n        console.log(err)\r\n    })\r\n\r\n    return{\r\n        type: LOGOUT_SUCCES\r\n    }\r\n}\r\n\r\n\r\n//LogIn User\r\n\r\nexport const login = ({ email, password }) => dispatch => {\r\n    //Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n    // Request body\r\n\r\n    const body = JSON.stringify({ email, password })\r\n\r\n    axios.post ('http://localhost:8080/api/auth', body, config)\r\n    .then(res => dispatch ({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n    }))\r\n    .catch(err => {\r\n        dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    });\r\n}\r\n\r\nexport const logInGoogle = (user) => dispatch => {\r\n    if(user){\r\n        dispatch({\r\n            type: REGISTER_GOOGLE_SUCCESS\r\n        });\r\n    }else{\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport const getFavourites = (id) => dispatch => {\r\n    axios.get ('http://localhost:8080/api/users/'+id)\r\n    .then(res => dispatch ({\r\n        type: GET_FAVOURITES,\r\n        payload: res.data\r\n    }))\r\n}\r\n\r\n\r\n// Setup config / headers and token\r\nexport const tokenConfig = getState => {\r\n    // Gete token from localStorage\r\n    const token = getState().auth.token;\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    // If token, add to headers\r\n    if (token) {\r\n        config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    return config;\r\n}"]},"metadata":{},"sourceType":"module"}
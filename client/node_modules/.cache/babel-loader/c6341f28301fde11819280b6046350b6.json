{"ast":null,"code":"import axios from 'axios';\nimport { ADD_FAV } from '../actions/types';\nexport const addFav = (email, itineraryId) => dispatch => {\n  // Request body\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    firstName,\n    lastName,\n    country\n  });\n  axios.post('http://localhost:8080/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/me/Documents/GitHub/my-itinerary/client/src/actions/userActions.js"],"names":["axios","ADD_FAV","addFav","email","itineraryId","dispatch","body","JSON","stringify","name","password","firstName","lastName","country","post","config","then","res","type","REGISTER_SUCCESS","payload","data","catch","err","returnErrors","response","status","REGISTER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,OADJ,QAEO,kBAFP;AAIA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwBC,QAAQ,IAAI;AAEtD;AAEA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEC,IAAAA,IAAF;AAAQN,IAAAA,KAAR;AAAeO,IAAAA,QAAf;AAAyBC,IAAAA,SAAzB;AAAoCC,IAAAA,QAApC;AAA8CC,IAAAA;AAA9C,GAAf,CAAb;AAEAb,EAAAA,KAAK,CAACc,IAAN,CAAY,iCAAZ,EAA+CR,IAA/C,EAAqDS,MAArD,EACCC,IADD,CACMC,GAAG,IAAIZ,QAAQ,CAAE;AACnBa,IAAAA,IAAI,EAAEC,gBADa;AAEnBC,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAFM,GAAF,CADrB,EAKCC,KALD,CAKOC,GAAG,IAAI;AACVlB,IAAAA,QAAQ,CAACmB,YAAY,CAACD,GAAG,CAACE,QAAJ,CAAaJ,IAAd,EAAoBE,GAAG,CAACE,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACArB,IAAAA,QAAQ,CAAC;AACLa,MAAAA,IAAI,EAAES;AADD,KAAD,CAAR;AAGH,GAVD;AAWH,CAjBM","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    ADD_FAV\r\n} from '../actions/types';\r\n\r\nexport const addFav = (email, itineraryId) => dispatch => {\r\n   \r\n    // Request body\r\n\r\n    const body = JSON.stringify({ name, email, password, firstName, lastName, country })\r\n\r\n    axios.post ('http://localhost:8080/api/users', body, config)\r\n    .then(res => dispatch ({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n    }))\r\n    .catch(err => {\r\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}